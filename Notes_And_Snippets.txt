---------------------------------------------

Another way of writing a for loop

for(char a : someString)
{
	// Code here..
}

---------------------------------------------

You can use underscores to increase the readability of int, short, long, float and double

int someValue = 10_000; // is equivalent to 10000

---------------------------------------------

String concatenation is best to be done with StringBuilder class. This way you only have to create one object, instead of an object for each string

eg:
StringBuilder builder = new StringBuilder("Hello")
.append(" ")
.append("world")
.append("!");

Note the concatenatios is being done through append method

---------------------------------------------

You can't compare strings with == because it tests whether they are or not the same object. It tests the reference. You can however compare them with the equals method

s1.equals(s2);

Like this

---------------------------------------------

There can be multiple catch() statements in java.
You should create a catch statement for each exception the try block may throw

eg:
 catch (ArrayIndexOutOfBoundsException e) {
	System.out.println("Array index problem");
} catch (StringIndexOutOfBoundsException e) {
	System.out.println("String index problem");	
}

---------------------------------------------

You can throw your own exceptions like this:
if(s1Chars.length > 10)
{
	Exception ce = new Exception("My very own exception");
	throw (ce);
}

You would also have to add a catch(Exception e) to handle the exception

---------------------------------------------

You can create a method which takes an infinite amount of parameters like this

int static someMethod(int ... values){
	// Your code here...
}

---------------------------------------------

In java, arguments are passed by value, not by reference.

---------------------------------------------

Variables storing objects are actually pointers  to those objects.
If multiple variables have the same object value, they actually point to the same object in memory.
Also, if you use an object name as a function argument, it is a pass by reference, since you use a pointer to the object as the actual parameter.

Note: String object is an exception to this rule, since it is "immutable". Once created, a String cannot be modified further. It can however be changed to point to another new string.

