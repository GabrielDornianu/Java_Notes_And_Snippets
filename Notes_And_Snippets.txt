---------------------------------------------

Another way of writing a for loop

for(char a : someString)
{
	// Code here..
}

---------------------------------------------

You can use underscores to increase the readability of int, short, long, float and double

int someValue = 10_000; // is equivalent to 10000

---------------------------------------------

String concatenation is best to be done with StringBuilder class. This way you only have to create one object, instead of an object for each string

eg:
StringBuilder builder = new StringBuilder("Hello")
.append(" ")
.append("world")
.append("!");

Note the concatenatios is being done through append method

---------------------------------------------

You can't compare strings with == because it tests whether they are or not the same object. It tests the reference. You can however compare them with the equals method

s1.equals(s2);

Like this

---------------------------------------------

There can be multiple catch() statements in java.
You should create a catch statement for each exception the try block may throw

eg:
 catch (ArrayIndexOutOfBoundsException e) {
	System.out.println("Array index problem");
} catch (StringIndexOutOfBoundsException e) {
	System.out.println("String index problem");	
}

---------------------------------------------

You can throw your own exceptions like this:
if(s1Chars.length > 10)
{
	Exception ce = new Exception("My very own exception");
	throw (ce);
}

You would also have to add a catch(Exception e) to handle the exception

---------------------------------------------

You can create a method which takes an infinite amount of parameters like this

int static someMethod(int ... values){
	// Your code here...
}